from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import atexit
import logging
from monitoring import MonitoringSystem

class TaskScheduler:
    def __init__(self, app=None):
        self.scheduler = BackgroundScheduler()
        self.app = app
        self.monitoring = None
        
        if app is not None:
            self.init_app(app)
    
    def init_app(self, app):
        self.app = app
        self.monitoring = MonitoringSystem(app)
        
        # ุฌุฏููุฉ ุงูููุงู
        self.schedule_tasks()
        
        # ุจุฏุก ุงููุฎุทุท
        self.scheduler.start()
        
        # ุฅููุงู ุงููุฎุทุท ุนูุฏ ุฅููุงู ุงูุชุทุจูู
        atexit.register(lambda: self.scheduler.shutdown())
    
    def schedule_tasks(self):
        """ุฌุฏููุฉ ุงูููุงู ุงูุชููุงุฆูุฉ"""
        # ูุณุฎ ุงุญุชูุงุทู ูููู ูู ููุชุตู ุงูููู
        self.scheduler.add_job(
            id='daily_backup',
            func=self.run_daily_backup,
            trigger=CronTrigger(hour=0, minute=0),
            replace_existing=True
        )
        
        # ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ ููููุงู ุงูุณุงุนุฉ 3 ุตุจุงุญุงู
        self.scheduler.add_job(
            id='clean_temp_files',
            func=self.clean_temp_files,
            trigger=CronTrigger(hour=3, minute=0),
            replace_existing=True
        )
        
        # ุฅุฑุณุงู ุชูุฑูุฑ ุฃุณุจูุนู ููู ุงูุฃุญุฏ ุงูุณุงุนุฉ 9 ุตุจุงุญุงู
        self.scheduler.add_job(
            id='weekly_report',
            func=self.send_weekly_report,
            trigger=CronTrigger(day_of_week='sun', hour=9, minute=0),
            replace_existing=True
        )
    
    def run_daily_backup(self):
        """ุชุดุบูู ูุณุฎ ุงุญุชูุงุทู ูููู"""
        try:
            # ุงุณุชุฏุนุงุก ุณูุฑูุจุช ุงููุณุฎ ุงูุงุญุชูุงุทู
            from backup_script import create_backup
            create_backup()
            self.monitoring.send_telegram_alert("โ ุชู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ููููุฉ ุจูุฌุงุญ")
        except Exception as e:
            self.monitoring.send_telegram_alert(f"โ ูุดู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ: {str(e)}")
    
    def clean_temp_files(self):
        """ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ"""
        import os
        import glob
        import time
        
        now = time.time()
        temp_dirs = ['/tmp', 'uploads/temp']
        
        for temp_dir in temp_dirs:
            if not os.path.exists(temp_dir):
                continue
                
            for filename in glob.glob(f"{temp_dir}/*"):
                try:
                    # ุญุฐู ุงููููุงุช ุงูุฃูุฏู ูู 7 ุฃูุงู
                    if os.path.isfile(filename):
                        file_time = os.path.getmtime(filename)
                        if (now - file_time) > (7 * 24 * 60 * 60):  # 7 ุฃูุงู
                            os.remove(filename)
                except Exception as e:
                    self.monitoring.send_telegram_alert(f"ุฎุทุฃ ูู ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ: {str(e)}")
    
    def send_weekly_report(self):
        """ุฅุฑุณุงู ุชูุฑูุฑ ุฃุณุจูุนู"""
        from app import db
        from models import User, PortfolioItem, ContactMessage
        
        try:
            # ุฅุญุตุงุฆูุงุช ุงููุณุชุฎุฏููู ุงูุฌุฏุฏ
            new_users = User.query.filter(
                User.registration_date >= db.func.date_sub(db.func.now(), db.text('interval 7 day'))
            ).count()
            
            # ุฅุญุตุงุฆูุงุช ุงููุดุงุฑูุน ุงูุฌุฏูุฏุฉ
            new_projects = PortfolioItem.query.filter(
                PortfolioItem.created_at >= db.func.date_sub(db.func.now(), db.text('interval 7 day'))
            ).count()
            
            # ุฑุณุงุฆู ุงูุงุชุตุงู ุงูุฌุฏูุฏุฉ
            new_messages = ContactMessage.query.filter(
                ContactMessage.created_at >= db.func.date_sub(db.func.now(), db.text('interval 7 day'))
            ).count()
            
            # ุฅูุดุงุก ุงูุชูุฑูุฑ
            report = f"""
            ๐ ุงูุชูุฑูุฑ ุงูุฃุณุจูุนู
            ===============
            
            ๐ฅ ุงููุณุชุฎุฏููู ุงูุฌุฏุฏ: {new_users}
            ๐ผ๏ธ ุงููุดุงุฑูุน ุงููุถุงูุฉ: {new_projects}
            ๐ฉ ุฑุณุงุฆู ุงูุงุชุตุงู: {new_messages}
            
            ุงูุชุงุฑูุฎ: {datetime.now().strftime('%Y-%m-%d %H:%M')}
            """
            
            self.monitoring.send_telegram_alert(report)
            
        except Exception as e:
            self.monitoring.send_telegram_alert(f"โ ูุดู ุฅุฑุณุงู ุงูุชูุฑูุฑ ุงูุฃุณุจูุนู: {str(e)}")

# ูุงุณุชุฎุฏุงู ุงููุธุงู ูู ุงูุชุทุจูู:
# scheduler = TaskScheduler(app)
