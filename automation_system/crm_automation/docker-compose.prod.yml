version: '3.8'

services:
  app:
    build: .
    container_name: crm_automation_app_prod
    command: gunicorn src.api.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
    restart: always
    env_file: .env.prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    networks:
      - crm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15
    container_name: crm_automation_db_prod
    env_file: .env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups/db:/backups
    networks:
      - crm_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: crm_automation_redis_prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    networks:
      - crm_network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build: .
    container_name: crm_automation_worker_prod
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4
    env_file: .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
    networks:
      - crm_network
    restart: always

  beat:
    build: .
    container_name: crm_automation_beat_prod
    command: celery -A src.tasks.celery_app beat --loglevel=info
    env_file: .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
    networks:
      - crm_network
    restart: always

  nginx:
    image: nginx:stable-alpine
    container_name: crm_automation_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/app/static:ro
    depends_on:
      - app
    networks:
      - crm_network
    restart: always

networks:
  crm_network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
